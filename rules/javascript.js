const config = require('./config-helper.js');
const jsLint = require('@eslint/js');
const importPlugin = require('eslint-plugin-import');
const globals = require('globals');

module.exports = config({
  files: ['**/*.js', '**/*.cjs', '**/*.mjs'],
  extends: [
    jsLint.configs.recommended,
    {
      languageOptions: {
        parserOptions: {
          // Eslint doesn't supply ecmaVersion in `parser.js` `context.parserOptions`
          // This is required to avoid ecmaVersion < 2015 error or 'import' / 'export' error
          ecmaVersion: 'latest',
          sourceType: 'module',
        },
        globals: {
          ...globals.browser,
          ...globals.node,
        },
      },
      plugins: {
        import: importPlugin,
      },
      settings: {
        // This will do the trick (https://github.com/import-js/eslint-plugin-import/issues/2556)
        'import/parsers': {
          espree: ['.js', '.cjs', '.mjs'],
        },
        'import/resolver': {
          typescript: true,
          node: true,
        },
      },
    },
  ],
  rules: {
    ...importPlugin.configs.recommended.rules,
    'no-unused-vars': ['error', { argsIgnorePattern: '^_+$' }],
    'arrow-body-style': 'error',
    'constructor-super': 'error',
    'no-restricted-exports': ['error', { restrictedNamedExports: ['default', 'then'] }],
    'no-useless-constructor': 'error',
    'no-useless-rename': 'error',
    'no-useless-catch': 'error',
    'no-useless-concat': 'error',
    'no-useless-escape': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'object-shorthand': ['error', 'always', { ignoreConstructors: false, avoidQuotes: true }],
    'prefer-arrow-callback': 'error',
    'no-shadow': 'error',
    'no-use-before-define': 'error',
    camelcase: ['error', { properties: 'never' }],
    'lines-between-class-members': 'error',
    'lines-around-directive': 'error',
    'no-array-constructor': 'error',
    'no-continue': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    'no-nested-ternary': 'error',
    'no-new-object': 'error',
    'no-unneeded-ternary': ['error', { defaultAssignment: false }],
    'one-var': ['error', 'never'],
    'operator-assignment': ['error', 'always'],
    'prefer-exponentiation-operator': 'error',
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],
    'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
    'spaced-comment': [
      'error',
      'always',
      {
        line: { exceptions: ['-', '+'], markers: ['=', '!', '/'] },
        block: { exceptions: ['-', '+'], markers: ['=', '!', ':', '::'], balanced: true },
      },
    ],
    'global-require': 'error',
    'no-path-concat': 'error',
    'for-direction': 'error',
    'getter-return': ['error', { allowImplicit: true }],
    'no-async-promise-executor': 'error',
    'no-await-in-loop': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': ['error', 'always'],
    'no-console': 'warn',
    'no-unreachable-loop': 'error',
    'consistent-return': 'error',
    'default-case': ['error', { commentPattern: '^no default$' }],
    'default-case-last': 'error',
    'default-param-last': 'error',
    'dot-notation': 'error',
    eqeqeq: ['error', 'smart'],
    'grouped-accessor-pairs': 'error',
    'guard-for-in': 'error',
    'max-classes-per-file': ['error', 1],
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-constructor-return': 'error',
    'no-else-return': ['error', { allowElseIf: false }],
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-label': 'error',
    'no-fallthrough': 'error',
    'no-iterator': 'error',
    'no-loop-func': 'error',
    'no-multi-str': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-octal-escape': 'error',
    'no-proto': 'error',
    'no-return-assign': ['error', 'always'],
    'no-return-await': 'error',
    'no-self-compare': 'error',
    'no-throw-literal': 'error',
    'no-unused-expressions': [
      'error',
      { allowShortCircuit: false, allowTernary: false, allowTaggedTemplates: false, enforceForJSX: false },
    ],
    yoda: 'error',
  },
});
